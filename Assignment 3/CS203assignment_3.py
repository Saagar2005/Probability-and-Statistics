# -*- coding: utf-8 -*-
"""CS203assignment_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zg_BjxR3SwBxHdkuRSVfw7NeyctjmTZq
"""

import numpy as np
import plotly.graph_objects as go
import matplotlib.pyplot as plt

# To calculate the total number of wins given stay in num_trials
def monty_hall_stay (n, k, num_trials):
  total_win_stay = 0
  for i in range(num_trials):
    doors = np.zeros(n, dtype=int)
    doors[:k] = 1
    np.random.shuffle(doors)
    chosen_door = np.random.choice(np.arange(n))
    if(doors[chosen_door]==1):
      total_win_stay+=1

  return total_win_stay

# To calculate the total number of wins given switch in num_trials
def monty_hall_switch (n, k, num_trials):
  total_win_switch = 0
  for i in range(num_trials):
    doors = np.zeros(n, dtype=int)
    doors[:k] = 1
    np.random.shuffle(doors)
    chosen_door = np.random.choice(np.arange(n))
    goat_doors = np.where(doors==0)[0]
    if(len(goat_doors)==0):     #if no goat door is present, then sure chance of win
      total_win_switch+=1
      continue
    elif(len(goat_doors)==1 and goat_doors[0]==chosen_door):       # if only one goat door present and that was chosen initially, then on switching, sure probability of win
      total_win_switch+=1
      continue
    revealed_door = np.random.choice(goat_doors[goat_doors!= chosen_door])
    available_doors = np.delete(np.arange(n), [chosen_door, revealed_door])
    new_choice = np.random.choice(available_doors)
    if(doors[new_choice]==1):
      total_win_switch+=1
  return total_win_switch

print("Taking input for n and k - ")
n = int(input("Enter the number of doors (n>=3):"))
k = int(input("Enter the number of cars (k<=n):"))
num_trials = int(input("Enter the number of trials:"))
prob_stay= monty_hall_stay(n, k, num_trials)
prob_switch= monty_hall_switch(n, k, num_trials)
print("The probability of win given stay is: ",prob_stay/num_trials)        #the probability of win given stay
print("The probability of win given switch is: ",prob_switch/num_trials)    #the probability of win given switch

print("Taking input for plotting - ")
n = int(input("Enter the max value for number of doors (n>=3):"))
k = int(input("Enter the max value for number of cars (k<=n):"))
num_trials = int(input("Enter the number of trials:"))

num_cars_plotly = []
num_doors_plotly = []
prob_ratio_plotly = []

num_cars_matplotlib = np.arange(0,n+1)
num_doors_matplotlib = np.arange(0,n+1)
n_grid_matplotlib, k_grid_matplotlib = np.meshgrid(num_cars_matplotlib,num_doors_matplotlib)
win_ratio_matplotlib = np.zeros((n + 1, n + 1), dtype=float)

for i in range(3,n+1):
  for j in range(0,n+1):
    num_cars_plotly.append(i)
    num_doors_plotly.append(j)
    if(j==0):         # if no of cars is 0, then both probabilities would be 0. So the ratio is defined to be 0.
      prob_ratio_plotly.append(0)
      win_ratio_matplotlib[j][i]=0
      continue
    elif(j>=i):      # if no of cars is greater than equal to no of doors, then both probabilities would be 1. So the ratio would be 1.
      prob_ratio_plotly.append(1)
      win_ratio_matplotlib[j][i]=1
      continue
    win_prob_stay= monty_hall_stay(i, j, num_trials)
    win_prob_switch= monty_hall_switch(i, j, num_trials)
    win_ratio = win_prob_switch / win_prob_stay
    prob_ratio_plotly.append(win_ratio)
    win_ratio_matplotlib[j][i] = win_prob_switch / win_prob_stay

prob_ratio = np.array(prob_ratio_plotly)
num_cars = np.array(num_cars_plotly)
num_doors = np.array(num_doors_plotly)
fig = go.Figure(data=[go.Mesh3d(x=num_cars, y=num_doors, z=prob_ratio, intensity=prob_ratio, opacity = 0.9)])
fig.update_layout(title='Generalised Monty Hall Simulation: Win Ratio Surface Plot', scene=dict(xaxis_title='Number of doors (n)', yaxis_title='Number of cars (k)', zaxis_title='Win Ratio (Switch/Stay)'))
fig.show()


fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')
surf = ax.plot_surface(n_grid_matplotlib, k_grid_matplotlib, win_ratio_matplotlib, cmap='viridis')
ax.set_xlabel('Number of doors (n)')
ax.set_ylabel('Number of cars (k)')
ax.set_zlabel('Win Ratio (Switch/Stay)')
ax.set_title('Generalised Monty Hall Simulation: Win Ratio Surface Plot')

plt.show()

